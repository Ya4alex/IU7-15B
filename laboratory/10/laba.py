# –Ø–Ω–æ—á–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–£7-15–ë
# –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã

import math as ma
from functools import lru_cache

EPS = 1e-5
MAX_ITERATION = int(500)
TEST = {
    '1': (
        lambda x: 2 * ma.cos(x) + 3,
        lambda x: 2 * ma.sin(x) + 3 * x),
    '2': (
        lambda x: x ** 5,
        lambda x: x ** 6 / 6),
    '3': (
        lambda x: 1 / x,
        lambda x: ma.log(abs(x))),
    '4': (
        lambda x: 4,
        lambda x: 4 * x),
    '5': (
        lambda x: ma.sin(x),
        lambda x: - ma.cos(x))
}
func, p_func = TEST['5']


def method_0(m: tuple, p_f=p_func) -> float:
    """
    –ú–µ—Ç–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π –∏–Ω—Ç–µ–≥—Ä–∞–ª –ø–æ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω–æ–π
    :param m: [start:end]
    :param p_f: - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    :return:
    """
    try:
        return p_f(m[1]) - p_f(m[0])
    except:
        pass


@lru_cache(maxsize=100000)
def method_1(m: tuple, n, f=func) -> float:
    """
    –ú–µ—Ç–æ–¥ –ø—Ä–∞–≤—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    :param m: [start:end]
    :param n: - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π
    :param f: - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    :return:
    """
    try:
        d = (m[1] - m[0]) / n
        s = 0
        for i in range(n):
            s += f(m[0] + d * i)
        s *= d
        return s
    except:
        pass


@lru_cache(maxsize=100000)
def method_2(m: tuple, n, f=func) -> float:
    """
    –ú–µ—Ç–æ–¥ —Ç—Ä–∞–ø–µ—Ü–∏–π
    :param m: [start:end]
    :param n: - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π
    :param f: - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    :return:
    """
    try:
        d = (m[1] - m[0]) / n
        s = 0
        for i in range(1, n - 1):
            s += f(m[0] + d * i)
        s = d * ((f(m[0]) + f(m[1])) / 2 + s)
        return s
    except:
        pass


def method_3(m: tuple, n, f=func) -> float:
    """
    –ú–µ—Ç–æ–¥ –°—Ä–µ–¥–Ω–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    :param m: [start:end]
    :param n: - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π
    :param f: - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    :return:
    """
    try:
        d = (m[1] - m[0]) / n
        s = 0
        for i in range(1, n - 1):
            s += f(m[0] + d * i)
        s = d * ((f(m[0]) + f(m[1])) / 2 + s)
        return s
    except:
        pass


def part2_count_iterations(m: tuple, method_i: int):
    """
    –†–∞—Å—á–µ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    :param m:
    :param method_i:
    :return:
    """
    print(f"\n–†–∞—Å—á—ë—Ç ùëÅ –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_i + 1} –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n|ùêº(ùëÅ) ‚àí ùêº(2ùëÅ)| < Œµ")
    method = METHOD_LIST[method_i]
    count_n = None
    eps = get_input(float, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å Œµ: ', default=EPS)
    last = method(m, 1)
    for n in range(1, MAX_ITERATION):
        now = method(m, 2 ** n)
        t = abs(last - now)
        if t < eps:
            count_n = 2 ** (n - 1)
            break
        last = now
    if count_n is None:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–∞ {MAX_ITERATION} –∏—Ç–µ—Ä–∞—Ü–∏–π.')
    else:
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è (ùëÅ) –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_i + 1} (–ø—Ä–∏ Œµ = {eps:.5g}):  {count_n}")


def get_input(data_type=float, text='–í–≤–æ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è: ', default=None, none=False):
    """
    –ë–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–≤–æ–¥–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    :param data_type: —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    :param text: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞
    :param default: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    :param none: –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å None
    :return:
    """
    while True:
        x = input(text)
        if not x and (none or default is not None):
            if none:
                return None
            return default
        try:
            return data_type(x)
        except:
            print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')


def get_input_from_string(data_type=float, count: int = None, text='–í–≤–æ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è: ', f=None) -> tuple:
    """
    –ë–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    :param data_type: —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    :param count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
    :param text: –¢–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
    :param f: –±—É–ª–µ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    :return: –∫–æ—Ä—Ç–µ–∂ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    while True:
        a = input(text).split()
        if count is not None and len(a) != count:
            print(f'–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ {count} –∑–Ω–∞—á–µ–Ω–∏–π!')
            continue
        try:
            ret = tuple(map(data_type, a))
            if f is None or all(map(f, ret)):
                return ret
        except ValueError:
            pass
        print(f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø—É {data_type} –∏–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é!")


def print_result_table(result):
    print('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')
    print('‚ïë           ‚ïë       N1      ‚ïë       N2      ‚ïë')
    print('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£')
    for m_i in range(len(METHOD_LIST)):
        print(f'‚ïë{f"–ú–µ—Ç–æ–¥ {m_i + 1}":^11}‚ïë{norm(result[m_i][0]["res"])}‚ïë{norm(result[m_i][1]["res"])}‚ïë')
        if m_i != len(METHOD_LIST) - 1:
            print('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£')
    print('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')


def print_result_table_plus(res):
    print('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')
    print('‚ïë                        ‚ïë       N1      ‚ïë       N2      ‚ïë')
    print('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£')
    for m_i in range(len(METHOD_LIST)):
        print(
            f'‚ïë{"":9}‚ïë{"–†–µ–∑—É–ª—å—Ç–∞—Ç:":^14}‚ïë{norm(res[m_i][0]["res"])}‚ïë{norm(res[m_i][1]["res"])}‚ïë\n'
            f'‚ïë{f"–ú–µ—Ç–æ–¥ {m_i + 1}":^9}‚ïë{"–ê–±—Å–æ–ª—é—Ç –ø–æ–≥:":^14}‚ïë{norm(res[m_i][0]["abp"])}‚ïë{norm(res[m_i][1]["abp"])}‚ïë\n'
            f'‚ïë{"":9}‚ïë{"–û—Ç–Ω–æ—Å–∏—Ç –ø–æ–≥:":^14}‚ïë{norm(res[m_i][0]["otp"])}‚ïë{norm(res[m_i][1]["otp"])}‚ïë'
        )
        if m_i != len(METHOD_LIST) - 1:
            print('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£')
    print('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')


def norm(x: float, ln=15):
    if x is None or isinstance(x, str):
        return f"{str(x):^{ln}}"
    return f"{x:^+{ln}.{ln - 7 if abs(x) >= 1e7 or abs(x) <= 1e-2 else ln - 5}g}"


METHOD_LIST = (method_3,)


def main():
    m = get_input_from_string(float, count=2, text='–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ')
    while m[0] > m[1]:
        print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–π!')
        m = get_input_from_string(float, count=2, text='–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ')
    n12 = get_input_from_string(int, count=2, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è n1 n2: ', f=lambda x: x > 0)

    res = (
        ({}, {}),
        ({}, {}),
    )
    for method_i, method in enumerate((method_1, method_2)):
        for n_i, n in enumerate(n12):
            res[method_i][n_i]['res'] = method(m, n)
            if res[method_i][n_i]['res'] is None:
                print(f'–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞ –Ω–∞ [{m[0]:+.5g}:{m[1]:+.5g}]')
                return main()

    result_0 = method_0(m)
    print(f"–ò–Ω—Ç–µ–≥—Ä–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é: {norm(result_0)}")

    best_m_i = None
    best_pog = 0
    for m_i in (0, 1):
        for n_i in (0, 1):
            res[m_i][n_i]['abp'] = abs(res[m_i][n_i]['res'] - result_0)
            if result_0:
                res[m_i][n_i]['otp'] = abs(res[m_i][n_i]['abp'] / result_0 * 100)
            else:
                res[m_i][n_i]['otp'] = None
            if best_m_i is None or best_pog > res[m_i][n_i]['abp']:
                best_m_i = m_i
                best_pog = res[m_i][n_i]['abp']
    print_result_table_plus(res)
    return None
    # print(f"–ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥: {best_m_i + 1}")
    #
    # part2_count_iterations(m, abs(best_m_i - 1))


if __name__ == "__main__":
    main()
